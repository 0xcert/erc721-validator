
 const Web3 = require('web3');
 //const fs = require('fs');
 const express = require('express');
 const app = express();
 
 web3 = new Web3(new Web3.providers.HttpProvider('HTTP://127.0.0.1:8545'));
 
 let data = '0x608060405234801561001057600080fd5b5060405160408061026e83398101604052805160209091015160018114156100a8576040805160208082526001908201527f31000000000000000000000000000000000000000000000000000000000000008183015290517ecb39d6c2c520f0597db0021367767c48fef2964cf402d3c9e9d4df12e439649181900360600190a16100a3826401000000006100b1810204565b6100aa565bfe5b505061022b565b60006100e6827f01ffc9a7000000000000000000000000000000000000000000000000000000006401000000006100f5810204565b90508015156100f157fe5b5050565b6000808061012c857f01ffc9a7000000000000000000000000000000000000000000000000000000006401000000006101df810204565b909250905081158061013c575080155b1561014a57600092506101d7565b61017d857fffffffff000000000000000000000000000000000000000000000000000000006401000000006101df810204565b909250905081158061018e57508015155b1561019c57600092506101d7565b6101af85856401000000006101df810204565b90925090506001821480156101c45750806001145b156101d257600192506101d7565b600092505b505092915050565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000080825260048201839052600091829190602081818189617530fa905190969095509350505050565b6035806102396000396000f3006080604052600080fd00a165627a7a7230582046f3f060a523e6306828624e6c6ee4c753f99c4e092778986aa859de70ec6b190029';

 let abi = [
	{
		"inputs": [
			{
				"name": "target",
				"type": "address"
			},
			{
				"name": "caseId",
				"type": "int256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "e",
				"type": "string"
			}
		],
		"name": "Test",
		"type": "event"
	}
]
 let TestContract = new web3.eth.Contract(abi);

 const kycRopsten = "0x2eafb8096f5f402043848e952b735a80976cd510";
 
 app.get('/validate', function (req, res) {
  TestContract
    .deploy({
      data: data,
      arguments: [kycRopsten, 1]
    })
    .estimateGas(function(err, gas){
      if (!err) {
        res.send(true);
      }else if (err.includes("gas required exceeds allowance or always failing transaction"))
      {  
        res.send(false);
      }else
      {
        res.send(err);
      }
    });
 })
 
 app.listen(3000, () => console.log('Example app listening on port 3000!'))